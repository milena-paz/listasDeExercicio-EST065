cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3){
cpf<-append(cpf,sinais[i],after=pos[i])
}
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#browser()
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
##
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(
all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num)))
)
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2 <- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do cpf dado é:",as.character(RF)))
}# FIM FUNCAO VALIDA CPF
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3){
cpf<-append(cpf,sinais[i],after=pos[i])
}
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#browser()
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
##
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(
all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num)))
)
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2 <- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO VALIDA CPF
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3){
cpf<-append(cpf,sinais[i],after=pos[i])
}
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#browser()
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
##
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(
all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num)))
)
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2 <- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO VALIDA CPF
#cpf<-c(0,4,0,1,4,8,0,7,8)
cpf<-c(1,3,7,9,4,6,0,2,6)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3){
cpf<-append(cpf,sinais[i],after=pos[i])
}
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#browser()
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
##
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(
all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num)))
)
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2 <- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO VALIDA CPF
###
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3){
cpf<-append(cpf,sinais[i],after=pos[i])
}
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#browser()
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
##
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(
all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num)))
)
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2 <- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO VALIDA CPF
###
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3) cpf<-append(cpf,sinais[i],after=pos[i])
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}# FIM FUNCAO verificador
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#---------------------------------------------------------#
#      O CPF deve estar no formato: "ABC.DEF.GHI-JK"
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num))))
#---------------------------------------------------------#
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2<- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO vCPF
###
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
pos<-c(3,7,11)
for(i in 1:3) cpf<-append(cpf,sinais[i],after=pos[i])
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
as.numeric("a")
as.numeric(NULL)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}# FIM FUNCAO verificador
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#---------------------------------------------------------#
#      O CPF deve estar no formato: "ABC.DEF.GHI-JK"
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num))))
#---------------------------------------------------------#
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2<- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO vCPF
###
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
for(i in 1:3) cpf<-append(cpf,sinais[i],after=3*i+i-1)
rm(sinais,pos,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}# FIM FUNCAO verificador
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#---------------------------------------------------------#
#      O CPF deve estar no formato: "ABC.DEF.GHI-JK"
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num))))
#---------------------------------------------------------#
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2<- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO vCPF
###
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
for(i in 1:3) cpf<-append(cpf,sinais[i],after=3*i+i-1)
rm(sinais,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
#funcao que calcula o verificador, com vetor caracter ou numerico
verificador<-function(cpf){
cpf<- as.numeric(cpf)
resto<-sum(cpf[1:9]*10:2)%%11
if(resto==1||resto==0) return(0)
return(11-resto)
}# FIM FUNCAO verificador
#testando com os primeiros 9 digitos de meu cpf, essa função funciona :)
vCPF<-function(cpf){
#---------------------------------------------------------#
#      O CPF deve estar no formato: "ABC.DEF.GHI-JK"
#verifica se o cpf é uma string de 14 caracteres
stopifnot(is.character(cpf),
nchar(cpf)==14)
cpf.sep <- separa(cpf)
cpf.num <- cpf.sep[c(1:3,5:7,9:11,13,14)]
#verifica se o cpf tem pontos e traço nas posicoes corretas
#e se os outros caracteres sao algarismos
stopifnot(all(cpf.sep[c(4,8,12)]==c(".",".","-")),
all(!is.na(as.numeric(cpf.num))))
#---------------------------------------------------------#
#valida digitos verificadores
V1<- as.numeric(cpf.num[11])
if(verificador(cpf.num != V1))
simpleError("CPF inválido: décimo dígito incorreto")
V2<- as.numeric(cpf.num[11])
if(verificador(cpf.num[-1] != V1))
simpleError("CPF inválido: décimo-primeiro dígito incorreto")
#retorna a região fiscal
nomes<-c("DF, GO, MS, MT e TO","AC, AM, AP, PA, RO e RR","CE, MA e PI",
"AL, PB, PE e RN","BA e SE","MG","ES e RJ","SP","PR e SC","RS")
RF <- factor(cpf.num[9],labels=nomes,levels=c(1:9,0))
return(paste("A região fiscal do CPF dado é:",as.character(RF)))
}# FIM FUNCAO vCPF
###
cpf<-c(0,4,0,1,4,8,0,7,8)
#completando o cpf
cpf<-append(cpf,verificador(cpf))
cpf<-append(cpf,verificador(cpf[-1]))
#colocando ele no formato correto
cpf<-as.character(cpf)
sinais<-c(".",".","-")
for(i in 1:3) cpf<-append(cpf,sinais[i],after=4*i-1)
rm(sinais,i)
cpf<-paste0(cpf,collapse='')
#Finalmente, validamos e verificamos a regiao fiscal do CPF dado
vCPF(cpf)
e.anagrama("cama","coma")
#funcao auxiliar, separa caracteres de uma string
#(usada na questão 4 também)
separa <- function(string){
return(unlist(strsplit(string,split="")))
}
##A)
faltam<-function(x){
algs <- 0:9
return(algs[-(x+1)])
}
faltam(c(0,2,4,8))
faltam(1:9)
##B)
e.anagrama<-function(palav.1,palav.2){
browser()
palav.1 <-separa(palav.1)
palav.2 <-separa(palav.1)
return(identical(palav.1[order(palav.1)],palav.2[order(palav.2)]))
}
e.anagrama("roma","amor")
e.anagrama("cama","coma")
##C)
posAlfabeto<-function(palav){
palav <-separa(palav)
A<-factor(palav, levels=letters)
return(as.numeric(A))
}
posAlfabeto("abc")
posAlfabeto("estatistica")
##A)
dia.semana<- function(dia=as.numeric(substr(Sys.Date(),9,10)),
mes=as.numeric(substr(Sys.Date(),6,7)),
ano=as.numeric(substr(Sys.Date(),1,4))){
#vetor com todos os nomes dos dias da semana
diasSemana<- c("Domingo",paste0(c('Segunda','Terça','Quarta','Quinta','Sexta'),"-feira"),
"Sábado")
#verifica quais sao janeiro ou fevereiro
janfev <- mes<3
#define ano no seculo Y
Y<-ano%%100
Y[which(janfev)] <- (Y[which(janfev)] - 1)
#define o número do século C
C<-floor(ano/100)
#define dia do mes K
K<- dia
#define o número do mês M
M<- numeric(length(mes))
M[which(janfev)] <- mes[which(janfev)]+10
M[which(!janfev)] <- mes[which(!janfev)]-2
#calcula a congruencia de Zeller
f<-(floor(2.6*M-0.2)+K+Y+floor(Y/4)+floor(C/4)-2*C)%%7
#retorna o nome do dia da semana correspondente ao valor de f
return(diasSemana[f+1])
}#FIM FUNCAO dia.semana
## B)
#Sim, funciona:
datas<- list(c(1,2,3),c(1,8,9),c(1966,1968,1974))
dia.semana(datas[[1]],datas[[2]],datas[[3]])
