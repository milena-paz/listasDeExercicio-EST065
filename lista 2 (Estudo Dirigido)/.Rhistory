#recursão concatena o valor calculado com os seguintes,
#formando um vetor que é retornado ao final das recursões
return( c(valor.anterior, ewma.r(x,k+1,lambda,valor.anterior) ))
}
Y <- alvo
Y <- append(Y, ewma.r(dados,k=1,lambda=peso,Y))
#verifica se o resultado está igual ao esperado
identical(medias.ew,Y)
#agora para comparar o desempenho das funções
library(microbenchmark)
(res<-microbenchmark(ewma= ewma(dados,peso,alvo),
ewma.r = append(alvo, ewma.r(dados,k=1,lambda=peso,alvo)),
times=500))
ggplot2::autoplot(res)
#vemos, então, que a diferença de performance é marginal:
#a diferença é de apenas alguns microssegundos
coefBin <- function(n, k){
# condições de parada
if(k > n) return(0)
if(k == 0 || k == n) return(1)
# recursão
valor <- coefBin(n - 1, k - 1) + coefBin(n - 1, k)
return(valor)
}
choose(6,4)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.2<- function(n,k){
if(n<=0||k<=0) return(1)
return((n-k+1)*coefBin2(n,k-1)/k)
}
res<-microbenchmark(coefBin(6,3))
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.2<- function(n,k){
if(n<=0||k<=0) return(1)
return((n-k+1)*coefBin2(n,k-1)/k)
}
res<-microbenchmark(coefBin.1(20,5),
coefBin.2(20,5),
coefBin(20,5),
choose(20,5))
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.2<- function(n,k){
if(n<=0||k<=0) return(1)
return((n-k+1)*coefBin.2(n,k-1)/k)
}
res<-microbenchmark(coefBin.1(20,5),
coefBin.2(20,5),
coefBin(20,5),
choose(20,5))
(res)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.2<- function(n,k){
if(n<=0||k<=0) return(1)
return((n-k+1)*coefBin.2(n,k-1)/k)
}
(res<-microbenchmark(coefBin.1(20,5),
coefBin.2(20,5),
coefBin(20,5),
choose(20,5)))
ggplot2::autoplot(res)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.2<- function(n,k){
if(n<=0||k<=0) return(1)
return((n-k+1)*coefBin.2(n,k-1)/k)
}
(res<-microbenchmark(coefBin.1(20,10),
coefBin.2(20,10),
coefBin(20,10),
choose(20,10)))
ggplot2::autoplot(res)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.2<- function(n,k){
if(n<=0||k<=0) return(1)
return((n-k+1)*coefBin.2(n,k-1)/k)
}
(res<-microbenchmark(coefBin.1(20,10),
coefBin.2(20,10),
coefBin(20,10),
choose(20,10)))
ggplot2::autoplot(res)
coefBin.2(3.14,2)
choose(-2,2)
choose(-4,-1)
coefBin.1(-2,2)
quarto
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBinVet <- function(n,k){
if(n<=0||k<=0) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBin.2(20,10),
coefBin(20,10),
choose(20,10)))
coefBinVet(6,2)
coefBinVet(1:10,1)
#baseado na equacao I
coefBin.1<- function(n,k){
if(all(n)<=0||all(k)<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBinVet <- function(n,k){
if(n<=0||k<=0) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBinVet(20,10),
coefBin(20,10),
choose(20,10)))
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBinVet <- function(n,k){
if(any(n)<=0||any(k)<=0) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBinVet(20,10),
coefBin(20,10),
choose(20,10)))
library(microbenchmark)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBinVet <- function(n,k){
if(any(n)<=0||any(k)<=0) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBinVet(20,10),
coefBin(20,10),
choose(20,10)))
coefBin <- function(n, k){
# condições de parada
if(k > n) return(0)
if(k == 0 || k == n) return(1)
# recursão
valor <- coefBin(n - 1, k - 1) + coefBin(n - 1, k)
return(valor)
}
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBinVet <- function(n,k){
if(any(n)<=0||any(k)<=0) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBinVet(20,10),
coefBin(20,10),
choose(20,10)))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as outras
#que usam as equacoes I e II;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro
any(1:3)
any(1:3)==4
x<-any(1:3)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBinVet <- function(n,k){
if(any(n<=0)||any(k<=0)) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBinVet(20,10),
coefBin(20,10),
choose(20,10)))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as outras
#que usam as equacoes I e II;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro
coefBinVet(1:4,1)
View(coefBinVet)
any(1:3)
coefBinVet <- function(n,k){
if(any(n<=0)||any(k<=0)) return(1)
return(prod(n/k,coefBin.1(n-1,k-1)))
}
coefBinVet(1:4,1)
vet<- 1:4
n<- 1:3
k<-1
for(i in seq_along(n)){}
for(i in seq_along(n)){}
coef <- 0
for(i in seq_along(n)){
coef[i]<-1
for(j in seq_along(k)){
if(k[j]==1) coef[i] <- prod(coef[i],n/k)
}
}
coef <- 0
browser()
for(i in seq_along(n)){
coef[i]<-1
for(j in seq_along(k)){
if(k[j]==1) coef[i] <- prod(coef[i],n/k)
}
}
coef <- 0
for(i in seq_along(n)){
browser()
coef[i]<-1
for(j in seq_along(k)){
if(k[j]==1) coef[i] <- prod(coef[i],n/k)
}
}
for(i in seq_along(n)){
browser()
coef[i]<-1
for(j in seq_along(k)){
if(k[j]==1) coef[i] <- prod(coef[i],n/k)
}
}
coef <- 0
for(i in seq_along(n)){
coef[i]<-1
for(j in seq_along(k)){
browser()
if(k[j]==1) coef[i] <- prod(coef[i],n/k)
}
}
k==1
prod(k+1:n/1:n)
prod(((k+1):1)/(1:n))
prod(2:6/1:6)
n<-3
k<-1:3
prod((k+1):n/1:n)
k+1:n
(k+1):n
choose(6,2)
3:6
1:6
coefBin.2<- function(n,k){
prod((1+k):n/(n-k):n)
}
coefBin.2(6,2)
6-2
4:6
3:6
coefBin.2<- function(n,k){
if(n-k<n) n<-n-k
prod(n:(n-k+1)/1:k)
}
coefBin.2(6,2)
6:5/1:2
prod(6,2.5)
prod(6:(6-2+1)/1:2)
coefBin.2<- function(n,k){
#if(n-k<n) n<-n-k
prod(n:(n-k+1)/1:k)
}
coefBin.2<- function(n,k){
if(n-k<k) n<-n-k
prod(n:(n-k+1)/1:k)
}
coefBin.2(6,2)
coefBin.2(20,10)
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
coefBin.1(20,10)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.vet<- function(n,k){
if(n-k<k) n<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBin.vet(20,10),
coefBin(20,10),
choose(20,10)))
coefBin <- function(n, k){
# condições de parada
if(k > n) return(0)
if(k == 0 || k == n) return(1)
# recursão
valor <- coefBin(n - 1, k - 1) + coefBin(n - 1, k)
return(valor)
}
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.vet<- function(n,k){
if(n-k<k) n<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBin.vet(20,10),
coefBin(20,10),
choose(20,10)))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as outras;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.vet<- function(n,k){
if(n-k<k) n<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
#coefBin.vet(20,10),
coefBin(20,10),
choose(20,10)))
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#baseado na equacao II
coefBin.vet<- function(n,k){
if(n-k<k) n<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1(20,10),
coefBin.vet(20,10),
#coefBin(20,10),
choose(20,10)))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as outras;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
coefBin.vet(6,2)
coefBin.vet(6,4)
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#usando calculo vetorizado
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1=coefBin.1(20,10),
coefBin.vet=coefBin.vet(20,10),
coefBin=coefBin(20,10),
choose=choose(20,10)), unit="microseconds")
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#usando calculo vetorizado
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1=coefBin.1(20,10),
coefBin.vet=coefBin.vet(20,10),
coefBin=coefBin(20,10),
choose=choose(20,10), unit="microseconds"))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as demais;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro.
#A função usando calculo vetorizado é a segunda mais rápida,
#monstrando que esse é o ponto mais forte do R
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#usando calculo vetorizado
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1=coefBin.1(20,10),
coefBin.vet=coefBin.vet(20,10),
#coefBin=coefBin(20,10),
choose=choose(20,10), unit="seconds"))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as demais;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro.
#A função usando calculo vetorizado é a segunda mais rápida,
#monstrando que esse é o ponto mais forte do R
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#usando calculo vetorizado
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1=coefBin.1(20,10),
coefBin.vet=coefBin.vet(20,10),
coefBin=coefBin(20,10),
choose=choose(20,10), unit="seconds"))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as demais;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro.
#A função usando calculo vetorizado é a segunda mais rápida,
#monstrando que esse é o ponto mais forte do R
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#usando calculo vetorizado
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1=coefBin.1(20,10),
coefBin.vet=coefBin.vet(20,10),
coefBin=coefBin(20,10),
choose=choose(20,10), unit="miliseconds"))
#baseado na equacao I
coefBin.1<- function(n,k){
if(n<=0||k<=0) return(1)
return(n*coefBin.1(n-1,k-1)/k)
}
#usando calculo vetorizado
coefBin.vet<- function(n,k){
if(n-k<k) k<-n-k
prod(n:(n-k+1)/1:k)
}
#comparando o desempenho das funcoes
(res<-microbenchmark(coefBin.1=coefBin.1(20,10),
coefBin.vet=coefBin.vet(20,10),
coefBin=coefBin(20,10),
choose=choose(20,10), unit="ms"))
ggplot2::autoplot(res)
#podemos ver que a funçao coefBin é muito mais lenta que as demais;
#alem disso, nota-se que a função choose é muito bem otimizada,
#sendo, de longe, a mais rápida das quatro.
#A função usando calculo vetorizado é a segunda mais rápida,
#monstrando que esse é o ponto mais forte do R
